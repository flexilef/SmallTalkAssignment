Object subclass: #BinTree	instanceVariableNames: 'rootLabel leftKid rightKid'	classVariableNames: ''	poolDictionaries: ''	category: 'TraversableTree'!!BinTree methodsFor: 'setters' stamp: 'KF 3/3/2017 16:34'!addLeftKid: tree	"sets left subtree"	leftKid _ tree! !!BinTree methodsFor: 'setters' stamp: 'KF 3/3/2017 16:34'!addRightKid: tree	"sets right subtree"	rightKid _ tree! !!BinTree methodsFor: 'setters' stamp: 'FL 3/4/2017 15:25'!setRoot: tree	"comment stating purpose of message"	rootLabel _ tree.! !!BinTree methodsFor: 'getters' stamp: 'KF 3/3/2017 16:30'!leftKid	"return the left subtree"	^leftKid! !!BinTree methodsFor: 'getters' stamp: 'KF 3/3/2017 16:42'!rightKid	"return the right subtree"	^rightKid! !!BinTree methodsFor: 'getters' stamp: 'FL 3/4/2017 17:29'!rootLabel	"return the label of the root node"		^rootLabel! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BinTree class	instanceVariableNames: 'rootLabel leftKid rightKid'!!BinTree class methodsFor: 'Creation' stamp: 'FL 3/4/2017 16:12'!newRoot: root	"Creates a new instance of BinTree with a single node"	| instance |	instance := super new.	instance setRoot: root.	^instance! !Object subclass: #InorderTraversal	instanceVariableNames: 'rootNode currentNode'	classVariableNames: ''	poolDictionaries: ''	category: 'TraversableTree'!!InorderTraversal methodsFor: 'getters' stamp: 'FL 3/4/2017 16:34'!getCurrentNode	"comment stating purpose of message"		^currentNode! !!InorderTraversal methodsFor: 'getters' stamp: 'FL 3/4/2017 16:46'!getRoot	"comment stating purpose of message"		^rootNode! !!InorderTraversal methodsFor: 'setters' stamp: 'FL 3/4/2017 17:10'!setCurrentNode: node	"comment stating purpose of message"		currentNode _ node.! !!InorderTraversal methodsFor: 'setters' stamp: 'FL 3/4/2017 16:46'!setRoot: root	"comment stating purpose of message"		rootNode _ root.! !!InorderTraversal methodsFor: 'Traversal' stamp: 'FL 3/4/2017 17:29'!first	"Returns the first/root node"		^rootNode! !!InorderTraversal methodsFor: 'Traversal' stamp: 'FL 3/4/2017 17:26'!next	"gets the next tree node based on inorder traversal"	| isLeaf nextNode |	isLeaf := (currentNode leftKid isNil) & ( currentNode rightKid isNil).	isLeaf 		ifTrue: [nextNode := nil]		ifFalse: [		"check left kid"		(currentNode leftKid isNil not) 			ifTrue: [nextNode := currentNode leftKid].		"check right kid"		(currentNode rightKid isNil not)			ifTrue: [nextNode := currentNode rightKid].		].		currentNode := nextNode.	^nextNode! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!InorderTraversal class	instanceVariableNames: ''!!InorderTraversal class methodsFor: 'Creation' stamp: 'FL 3/4/2017 17:09'!newTraversal: root	"comment stating purpose of message"	| instance |	instance := super new.	instance setRoot: root.	instance setCurrentNode: root.	^ instance! !